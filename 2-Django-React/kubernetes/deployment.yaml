apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: django
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: FRONTEND_IMAGE
        ports:
        - containerPort: 80
        env:
        - name: REACT_APP_BACKEND_URL
          value: "http://backend:8000"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: django
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: BACKEND_IMAGE  
        ports:
        - containerPort: 8000
        env:
        - name: DEBUG
          value: "False"
        - name: SQL_DATABASE
          value: "mydatabase"
        - name: SQL_USER
          value: "user"
        - name: SQL_PASSWORD
          value: "password"
        - name: SQL_HOST
          value: "db"
        - name: SQL_PORT
          value: "5432"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: django
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: postgres:13
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "mydatabase"
        - name: POSTGRES_USER
          value: "user"
        - name: POSTGRES_PASSWORD
          value: "password"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: django
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
